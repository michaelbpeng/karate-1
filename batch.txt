    @Bean
    public Job orderProcessingJob() {
        return jobBuilderFactory.get("orderProcessingJob")
                .start(decideStep())
                .on("TV").to(tvOrderStep()).next(zipTvOrdersStep())
                .from(decideStep())
                .on("COMPUTER").to(computerOrderStep()).next(zipComputerOrdersStep())
                .end()
                .build();
    }

    @Bean
    public Step decideStep() {
        return stepBuilderFactory.get("decideStep")
                .tasklet((contribution, chunkContext) -> {
                    String orderType = (String) chunkContext.getStepContext().getJobParameters().get("orderType");
                    contribution.setExitStatus(ExitStatus.COMPLETED.withExitCode(orderType));
                    return RepeatStatus.FINISHED;
                })
                .build();
    }


---- retry
    @Bean
    public Job orderProcessingJob() {
        return jobBuilderFactory.get("orderProcessingJob")
                .start(decideStep())
                .on("TV").to(tvOrderStep()).next(zipTvOrdersStep())
                .from(decideStep())
                .on("COMPUTER").to(computerOrderStep()).next(zipComputerOrdersStep())
                .end()
                .build();
    }

    @Bean
    public Step decideStep() {
        return stepBuilderFactory.get("decideStep")
                .tasklet((contribution, chunkContext) -> {
                    String orderType = (String) chunkContext.getStepContext().getJobParameters().get("orderType");
                    contribution.setExitStatus(ExitStatus.COMPLETED.withExitCode(orderType));
                    return RepeatStatus.FINISHED;
                })
                .build();
    }


-----
@Bean
public Step orderProcessingStep() {
    return stepBuilderFactory.get("orderProcessingStep")
            .<Order, Order>chunk(5000)
            .reader(determineReader())
            .writer(orderItemWriter)
            .faultTolerant()
            .retryLimit(3) // Retry up to 3 times on failure
            .retry(Exception.class)
            .taskExecutor(taskExecutor())
            .throttleLimit(4)
            .transactionManager(transactionManager)
            .build();
}


----------
   @Bean
    public Step orderProcessingStep() {
        return stepBuilderFactory.get("orderProcessingStep")
                .<Object, Object>chunk(100)
                .reader(determineReader())
                .processor(orderProcessor)
                .writer(determineWriter())
                .transactionManager(transactionManager)
                .build();
    }

    @Bean
    public TaskletStep zipFileStep() {
        return stepBuilderFactory.get("zipFileStep")
                .tasklet(zipFileTasklet)
                .transactionManager(transactionManager)
                .build();
    }

    @Bean
    public ItemReader<Object> determineReader() {
        String orderType = jobParameters.getString("orderType");
        if ("TV".equalsIgnoreCase(orderType)) {
            return tvOrderReader;
        } else if ("Computer".equalsIgnoreCase(orderType)) {
            return computerOrderReader;
        } else {
            throw new IllegalArgumentException("Invalid order type: " + orderType);
        }
    }

    @Bean
    public ItemWriter<Object> determineWriter() {
        String orderType = jobParameters.getString("orderType");
        if ("TV".equalsIgnoreCase(orderType)) {
            return tvOrderItemWriter;
        } else if ("Computer".equalsIgnoreCase(orderType)) {
            return computerOrderItemWriter;
        } else {
            throw new IllegalArgumentException("Invalid order type: " + orderType);
        }
    }



------
import org.springframework.batch.core.JobParameters;
import org.springframework.batch.core.StepContribution;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.item.ItemReader;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.configuration.annotation.JobConfigurer;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.configuration.annotation.JobConfigurer;
import org.springframework.batch.core.configuration.annotation.JobConfigurer;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.core.configuration.annotation.JobConfigurer;
import org.springframework.batch.core.job.builder.JobBuilder;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.configuration.annotation.JobConfigurer;
import org.springframework.batch.core.Step;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.core.step.builder.StepBuilder;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.Configuration;

@Configuration
public class OrderProcessingJobConfig {

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

    @Bean
    public Job orderProcessingJob() {
        return jobBuilderFactory.get("orderProcessingJob")
                .start(orderStep())
                .build();
    }

    @Bean
    public Step orderStep() {
        return stepBuilderFactory.get("orderStep")
                .<Order, Order>chunk(100)
                .reader(determineReader())
                .processor(orderProcessor())
                .writer(orderWriter())
                .build();
    }

    @Bean
    public ItemReader<Order> determineReader() {
        return new ItemReader<Order>() {
            @Override
            public Order read() throws Exception {
                JobParameters jobParameters = StepContribution.getStepContext().getStepExecution().getJobParameters();
                String orderType = jobParameters.getString("orderType");
                
                if ("TV".equalsIgnoreCase(orderType)) {
                    return new TVOrderReader(); // Adjust this to your actual TVOrderReader
                } else if ("Computer".equalsIgnoreCase(orderType)) {
                    return new ComputerOrderReader(); // Adjust this to your actual ComputerOrderReader
                } else {
                    throw new IllegalArgumentException("Invalid order type: " + orderType);
                }
            }
        };
    }

    @Bean
    public ItemProcessor<Order, Order> orderProcessor() {
        // Return your processor here
        return new OrderProcessor();
    }

    @Bean
    public ItemWriter<Order> orderWriter() {
        // Return your writer here
        return new OrderWriter();
    }
}


------
-- Function to get TV orders within one day of a specific order_date
CREATE OR REPLACE FUNCTION get_tv_orders_by_date(target_date DATE)
RETURNS TABLE(
    order_id INT,
    customer_name VARCHAR,
    order_date DATE,
    total_amount DECIMAL,
    model VARCHAR,
    manufacturer VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT order_id, customer_name, order_date, total_amount, model, manufacturer
    FROM tv_orders
    WHERE order_date BETWEEN target_date - INTERVAL '1 day' AND target_date + INTERVAL '1 day';
END;
$$ LANGUAGE plpgsql;

-- Function to get Computer orders within one day of a specific order_date
CREATE OR REPLACE FUNCTION get_computer_orders_by_date(target_date DATE)
RETURNS TABLE(
    order_id INT,
    customer_name VARCHAR,
    order_date DATE,
    total_amount DECIMAL,
    cpu VARCHAR,
    ram VARCHAR
) AS $$
BEGIN
    RETURN QUERY
    SELECT order_id, customer_name, order_date, total_amount, cpu, ram
    FROM computer_orders
    WHERE order_date BETWEEN target_date - INTERVAL '1 day' AND target_date + INTERVAL '1 day';
END;
$$ LANGUAGE plpgsql;





----

import org.springframework.batch.item.database.JdbcCursorItemReader;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.jdbc.core.RowMapper;
import javax.sql.DataSource;
import java.sql.ResultSet;
import java.sql.SQLException;

public class ComputerOrderCursorReader extends JdbcCursorItemReader<ComputerOrder> {

    public ComputerOrderCursorReader(DataSource dataSource, java.sql.Date orderDate) {
        setDataSource(dataSource);
        setSql("SELECT * FROM get_computer_orders_by_date(?)");
        setPreparedStatementSetter(ps -> ps.setDate(1, orderDate));
        setRowMapper(new ComputerOrderRowMapper());
    }

    private static class ComputerOrderRowMapper implements RowMapper<ComputerOrder> {
        @Override
        public ComputerOrder mapRow(ResultSet rs, int rowNum) throws SQLException {
            ComputerOrder computerOrder = new ComputerOrder();
            computerOrder.setOrderId(rs.getInt("order_id"));
            computerOrder.setCustomerName(rs.getString("customer_name"));
            computerOrder.setOrderDate(rs.getDate("order_date").toLocalDate());
            computerOrder.setTotalAmount(rs.getDouble("total_amount"));
            computerOrder.setCpu(rs.getString("cpu"));
            computerOrder.setRam(rs.getString("ram"));
            return computerOrder;
        }
    }
}


-----------
———————————————
—config
    @Bean
    public ItemReader<Order> orderReader(@Value("#{jobParameters['orderDate']}") String orderDate) {
        return new OrderReader(dataSource, orderDate);
    }



    @Bean
    public Step processComputerOrderStep() {
        return stepBuilderFactory.get("processComputerOrderStep")
                .<ComputerOrder, ComputerOrder>chunk(10)
                .reader(computerOrderReader())
                .processor(orderProcessor())
                .writer(computerOrderItemWriter)
                .build();
    }

// item processor - conversion
package com.example.batch.processor;

import com.example.batch.entity.Order;
import org.springframework.batch.item.ItemProcessor;
import org.springframework.stereotype.Component;

@Component
public class OrderProcessor implements ItemProcessor<Order, Order> {

    @Override
    public Order process(Order item) {
        // Implement your processing logic here
        return item;
    }
}
———————————————————————

## 1. `src/main/java/com/example/batch/listener/ComputerOrderReadListener.java`

```java
package com.example.batch.listener;

import com.example.batch.entity.ComputerOrder;
import org.springframework.batch.core.ItemReadListener;
import org.springframework.batch.core.StepExecution;
import org.springframework.batch.core.annotation.OnReadError;
import org.springframework.batch.core.configuration.annotation.JobBuilderFactory;
import org.springframework.batch.core.configuration.annotation.StepBuilderFactory;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.ChunkContext;
import org.springframework.batch.core.scope.context.JobContext;
import org.springframework.batch.core.step.tasklet.TaskletStep;
import org.springframework.batch.core.step.tasklet.Tasklet;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.batch.core.StepExecutionListener;
/**
  itemReadLInstener
*/
public class ComputerOrderReadListener implements ItemReadListener<ComputerOrder> {

    @Autowired
    private JobBuilderFactory jobBuilderFactory;

    @Autowired
    private StepBuilderFactory stepBuilderFactory;

    @Override
    public void beforeRead() {
        // Optional: Code before reading an item
    }

    @Override
    public void afterRead(ComputerOrder item) {
        // Example logic to update totals
        StepExecution stepExecution = jobExecution.getExecutionContext().getStepExecution();
        ChunkContext chunkContext = stepExecution.getJobExecution().getExecutionContext();
        int totalAccount = (int) chunkContext.get("totalAccount");
        double totalAmount = (double) chunkContext.get("totalAmount");
        
        totalAccount += 1;
        totalAmount += item.getPrice() * item.getQuantity();
        
        chunkContext.put("totalAccount", totalAccount);
        chunkContext.put("totalAmount", totalAmount);
    }

    @Override
    public void onReadError(Exception ex) {
        // Optional: Code to handle read errors
    }
}
```


———————

    @Bean
    public Step tvOrderStep() {
        return stepBuilderFactory.get("tvOrderStep")
                .<TVOrder, TVOrder>chunk(1000)
                .reader(tvOrderReader)
                .writer(new OrderItemWriter<>(
                        "tvOrders.csv",
                        tvOrderLineAggregator,
                        "Header for TV Orders",
                        "Trailer for TV Orders"
                ))
                .listener(tvOrderReadListener) // item read listener
                .taskExecutor(taskExecutor())
                .build();
    }
——
@Bean
public Step orderProcessingStep() {
    return stepBuilderFactory.get("orderProcessingStep")
            .<Order, Order>chunk(5000)
            .reader(determineReader())
            .writer(orderItemWriter)
            .faultTolerant()
            .retryLimit(3) // Retry up to 3 times on failure
            .retry(Exception.class)
            .taskExecutor(taskExecutor())
            .throttleLimit(4)
            .transactionManager(transactionManager)
            .build();
}
———



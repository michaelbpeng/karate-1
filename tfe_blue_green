


To create a full **ECS Blue/Green deployment project** using **Spinnaker**, **Terraform**, and **AWS ALB weighted routing**, I'll walk you through a comprehensive setup. Below are the essential components you'll need:

### **Project Structure:**
```bash
ecs-blue-green-project/
├── terraform/
│   ├── main.tf
│   ├── variables.tf
│   ├── outputs.tf
│   └── terraform.tfvars
├── spinnaker/
│   └── ecs-blue-green-pipeline.json
└── README.md
```

### **Terraform Setup:**

#### **Step 1: main.tf (Terraform)**
This file contains the main infrastructure setup, including ECS services, ALB, and target groups.

```hcl
provider "aws" {
  region = "us-east-1"
}

# Create a VPC
resource "aws_vpc" "example_vpc" {
  cidr_block = "10.0.0.0/16"
}

# Create subnets
resource "aws_subnet" "example_subnet" {
  count = 2
  vpc_id = aws_vpc.example_vpc.id
  cidr_block = element(["10.0.1.0/24", "10.0.2.0/24"], count.index)
}

# Security group for ECS tasks
resource "aws_security_group" "ecs_sg" {
  name   = "ecs-sg"
  vpc_id = aws_vpc.example_vpc.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# Create an Application Load Balancer
resource "aws_lb" "example_alb" {
  name               = "example-alb"
  internal           = false
  load_balancer_type = "application"
  security_groups    = [aws_security_group.ecs_sg.id]
  subnets            = aws_subnet.example_subnet[*].id
}

# Target groups for Blue/Green ECS services
resource "aws_lb_target_group" "blue_target_group" {
  name     = "blue-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.example_vpc.id
}

resource "aws_lb_target_group" "green_target_group" {
  name     = "green-target-group"
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.example_vpc.id
}

# ALB Listener with Weighted Routing
resource "aws_lb_listener" "http_listener" {
  load_balancer_arn = aws_lb.example_alb.arn
  port              = 80
  protocol          = "HTTP"
  
  default_action {
    type = "forward"
    forward {
      target_group {
        arn    = aws_lb_target_group.blue_target_group.arn
        weight = 80
      }
      target_group {
        arn    = aws_lb_target_group.green_target_group.arn
        weight = 20
      }
    }
  }
}

# ECS Cluster
resource "aws_ecs_cluster" "example_ecs_cluster" {
  name = "example-ecs-cluster"
}

# ECS Service for Blue
resource "aws_ecs_service" "blue_service" {
  name            = "blue-service"
  cluster         = aws_ecs_cluster.example_ecs_cluster.id
  task_definition = aws_ecs_task_definition.example_task_def.arn
  desired_count   = 2
  
  load_balancer {
    target_group_arn = aws_lb_target_group.blue_target_group.arn
    container_name   = "app"
    container_port   = 80
  }

  deployment_minimum_healthy_percent = 100
  deployment_maximum_percent         = 200
}

# ECS Service for Green (initially 0 tasks)
resource "aws_ecs_service" "green_service" {
  name            = "green-service"
  cluster         = aws_ecs_cluster.example_ecs_cluster.id
  task_definition = aws_ecs_task_definition.example_task_def.arn
  desired_count   = 0

  load_balancer {
    target_group_arn = aws_lb_target_group.green_target_group.arn
    container_name   = "app"
    container_port   = 80
  }

  deployment_minimum_healthy_percent = 100
  deployment_maximum_percent         = 200
}

# ECS Task Definition
resource "aws_ecs_task_definition" "example_task_def" {
  family                   = "app-task"
  container_definitions    = jsonencode([{
    name  = "app"
    image = "nginx:latest"
    cpu   = 256
    memory = 512
    essential = true
    portMappings = [{
      containerPort = 80
      hostPort      = 80
    }]
  }])
}
```

#### **Step 2: variables.tf**
Define all variables to keep the configuration flexible.

```hcl
variable "aws_region" {
  description = "AWS region"
  default     = "us-east-1"
}

variable "vpc_cidr" {
  description = "CIDR block for VPC"
  default     = "10.0.0.0/16"
}
```

#### **Step 3: outputs.tf**
Output useful information such as ALB DNS name.

```hcl
output "alb_dns_name" {
  value = aws_lb.example_alb.dns_name
  description = "The DNS name of the ALB"
}
```

#### **Step 4: terraform.tfvars**
This file contains values for the variables.

```hcl
aws_region = "us-east-1"
vpc_cidr   = "10.0.0.0/16"
```

### **Spinnaker Pipeline Setup:**

#### **ecs-blue-green-pipeline.json (Spinnaker)**
This JSON file defines the Spinnaker pipeline for the Blue/Green deployment.

```json
{
  "application": "myapp",
  "name": "ECS Blue-Green Deployment",
  "stages": [
    {
      "type": "trigger",
      "enabled": true,
      "name": "Trigger Terraform Plan",
      "triggers": [
        {
          "type": "webhook",
          "enabled": true
        }
      ]
    },
    {
      "type": "manualJudgment",
      "name": "Approval for Deployment",
      "judgmentInputs": []
    },
    {
      "type": "deploy",
      "name": "Deploy Green ECS Service",
      "clusters": [
        {
          "cloudProvider": "ecs",
          "application": "myapp",
          "targetGroup": "green-target-group",
          "desiredCount": 2
        }
      ]
    },
    {
      "type": "modifyAlbTraffic",
      "name": "Shift 20% Traffic to Green",
      "targetGroupPair": {
        "oldTargetGroup": "blue-target-group",
        "newTargetGroup": "green-target-group"
      },
      "weight": 20
    },
    {
      "type": "manualJudgment",
      "name": "Approval for Full Shift",
      "judgmentInputs": []
    },
    {
      "type": "modifyAlbTraffic",
      "name": "Shift 50% Traffic to Green",
      "targetGroupPair": {
        "oldTargetGroup": "blue-target-group",
        "newTargetGroup": "green-target-group"
      },
      "weight": 50
    },
    {
      "type": "modifyAlbTraffic",
      "name": "Shift 100% Traffic to Green",
      "targetGroupPair": {
        "oldTargetGroup": "blue-target-group",
        "newTargetGroup": "green-target-group"
      },
      "weight": 100
    }
  ]
}
```

### **How to Use This Project:**

1. **Setup Terraform:**
   - Install **Terraform** if you don't have it already.
   - In the `terraform/` folder, run the following commands:
     ```bash
     terraform init
     terraform apply
     ```
   - This will provision the ECS services, ALB, and the necessary infrastructure.

2. **Configure Spinnaker:**
   - Add the `ecs-blue-green-pipeline.json` pipeline in Spinnaker.
   - You can configure a **Webhook** in Spinnaker to trigger Terraform if required.

3. **Deploy ECS Blue/Green:**
   - Once Terraform provisions the infrastructure, you can trigger the pipeline in Spinnaker to gradually shift traffic from the Blue ECS service to the Green ECS service using ALB weighted routing.

4. **Monitor the Deployment:**
   - Watch the ALB listener rules to verify traffic distribution.
   - Spinnaker provides manual judgment stages for human approval during traffic shifts.

---

This setup automates Blue/Green deployments for ECS using Terraform to provision resources and Spinnaker to manage the traffic shifts and deployment process. Let me know if you need further explanations or customizations!


reference
https://medium.com/@ywg/blue-green-deployment-on-aws-ecs-with-terraform-7dfd67502b5b
